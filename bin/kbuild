#!/usr/bin/env python

import subprocess
import argparse
import sys
from  os import path
import inspect
import yaml

LIB_DIR       = path.join(path.dirname(__file__), '../lib')
CALCDEPS_PATH = path.join(LIB_DIR, 'closure/calcdeps.py')
COMPILER_PATH = path.join(LIB_DIR, 'closure-compiler-svn1394.jar')

def execute_command(command):
  subprocess.Popen(command, stdout=sys.stdout).communicate()

def get_compiler_flags(base_path, debug = False, closure_entry_point = None, language_in = None):
    compilerflags  = []
    compilerflags += ["--compilation_level=ADVANCED_OPTIMIZATIONS"]
    compilerflags += ["--summary_detail_level=3"]
    compilerflags += ["--warning_level=VERBOSE"]
    compilerflags += ['--jscomp_warning=checkTypes']
    compilerflags += ['--generate_exports']

    if debug:
        compilerflags += ['--debug', '--formatting=PRETTY_PRINT', '--formatting=PRINT_INPUT_DELIMITER']
    if closure_entry_point:
        compilerflags += ['--closure_entry_point=%s' % closure_entry_point]
    if language_in:
        compilerflags += ['--language_in=%s' % language_in]

    # to eliminate errors about unfound closure dependencies
    # http://groups.google.com/group/closure-compiler-discuss/msg/7d089cc101a2cf00?pli=1
    # http://code.google.com/p/closure-library/issues/detail?id=142
    deps_path = path.join(base_path, 'goog', 'deps.js')
    if path.isfile(deps_path):
        compilerflags += ['--js=%s' % deps_path]

    return compilerflags

def make_deps(base_path, js_paths, deps_path):
    command = ['python', CALCDEPS_PATH]
    command += ['--dep', base_path]
    command += ["-o", 'deps']
    
    for path in js_paths:
        command += ['-p', path]
    
    command += ["--output_file", deps_path]
    
    execute_command(command)

def compile(base_path, js_paths, inputs, compile_path, externs = [], debug = False, closure_entry_point = None, language_in = None):
    command = ['python', CALCDEPS_PATH]
    command += ['-o', 'compiled']
    command += ['--compiler_jar', COMPILER_PATH]

    for flag in get_compiler_flags(base_path, debug, closure_entry_point, language_in):
        command += ['-f', flag]
    
    for extern in externs:
        command += ['-f', "--externs=%s" % extern]
    
    for path in js_paths:
        command += ['-p', path]

    for path in inputs:
        command += ['-i', path]
    
    command += ["--output_file", compile_path]
    
    execute_command(command)

def invoke_command(function, args):
    argspec = inspect.getargspec(function)
    defined_args = argspec.args

    # remove args that are not needed by the desired command
    for key in args.keys():
        if key not in defined_args:
            del args[key]

    # arguments requiring values are in the range
    # 0 to (n-k)
    #    where n is the length of the args
    #    and k is the number of args with default values
    if argspec.defaults:
        required_args = defined_args[0:-len(argspec.defaults)]
    else:
        required_args = defined_args

    # make sure required args are present
    # or exit!
    for key in required_args:
        if key not in args:
            print "missing '%s', yo" % key
            sys.exit(1)

    # Call function with the right args and only the right args
    function(**args)

def main():
    parser = argparse.ArgumentParser(description='Prepare a closure-based javascript set.')

    parser.add_argument('--buildfile',
        default='default.kbuild',
        help='the file to parse')

    parser.add_argument('--target',
        default='deps',
        choices=['deps','compile','both'],
        help='specify to either create a deps file, compile, or both')

    parser.add_argument('--debug',
        action='store_true',
        help='enable debug output when in compile mode')

    parser.add_argument('--language_in',
        default='ECMASCRIPT5_STRICT',
        choices=['ECMASCRIPT3', 'ECMASCRIPT5', 'ECMASCRIPT5_STRICT'],
        help='Sets what language spec that input sources conform.')

    args = parser.parse_args()

    try:
        with open(args.buildfile) as bf:
            ybf = yaml.load(bf)
    except Exception as err:
        print err
        sys.exit(1)

    ybf['debug'] = args.debug
    ybf['language_in'] = args.language_in

    if args.target == 'deps':
        funcs = [make_deps]
    elif args.target == 'compile':
        funcs = [compile]
    elif args.target =='both':
        funcs = [make_deps, compile]
    else:
        print "Not sure what to do..."
        sys.exit(1)

    for func in funcs:
        invoke_command(func, ybf.copy())

if __name__ == '__main__':
  main()
